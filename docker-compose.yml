version: "3.9"

services:
    nginx_node:
        build: ./docker/nginx
        image: arworkacc/nginx_node
        container_name: nginx_node
        depends_on:
            - app_funds
        restart: "no"
        ports:
            - "8001:443"
        volumes:
            - static:/home/static
            - ssh_keys:/home/ssh_keys
        networks:
            - backend
        deploy:
            replicas: 3
            update_config:
                delay: 10s
                parallelism: 2
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 3
                window: 120s
    app_funds:
        build: ./docker/node
        image: arworkacc/app_funds
        container_name: app_funds
        depends_on:
            - postgres
            - redis
        restart: "no"
        volumes:
            - static:/usr/src/app/_app
            - ssh_keys:/usr/src/app/docker/node
        networks:
            - backend
        deploy:
            replicas: 3
            update_config:
                parallelism: 3
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 3
                window: 120s
    postgres:
        build: ./docker/postgres
        image: arworkacc/postgres
        container_name: postgres
        restart: always
        ports:
            - 5432:5432
        environment:
            POSTGRES_DB: app_funds_prod
            POSTGRES_PASSWORD: pw20220501
            POSTGRES_MULTIPLE_DBS: app_funds,app_funds_test
        networks:
            - backend
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 1
                window: 120s
    redis:
        image: redis:6.2.6-bullseye
        container_name: redis
        command: redis-server --requirepass pw20220501
        restart: always
        ports:
            - 6379:6379
        networks:
            - backend
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 1
                window: 120s
networks:
    backend:

volumes:
    static:
    ssh_keys:
